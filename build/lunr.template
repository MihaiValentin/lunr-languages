/**
 * export the module via AMD, CommonJS or as a browser global
 * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
 */
;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory)
    } else if (typeof exports === 'object') {
        /**
         * Node. Does not work with strict CommonJS, but
         * only CommonJS-like environments that support module.exports,
         * like Node.
         */
        module.exports = factory()
    } else {
        // Browser globals (root is window)
        factory()(root.lunr);
    }
}(this, function () {
    /**
     * Just return a value to define the module export.
     * This example returns an object, but the module
     * can return a function as the exported value.
     */
    return function(lunr) {
        /* throw error if lunr is not yet included */
        if ('undefined' === typeof lunr) {
            throw new Error('Lunr is not present. Please include / require Lunr before this script.');
        }

        /* throw error if lunr stemmer support is not yet included */
        if ('undefined' === typeof lunr.stemmerSupport) {
            throw new Error('Lunr stemmer support is not present. Please include / require Lunr stemmer support before this script.');
        }

        /* register specific locale function */
        lunr.{{locale}} = function () {
            this.pipeline.reset();
            this.pipeline.add(
                lunr.{{locale}}.trimmer,
                lunr.{{locale}}.stopWordFilter,
                lunr.{{locale}}.stemmer
            );
        };

        /* lunr trimmer function */
        lunr.{{locale}}.wordCharacters = "{{wordCharacters}}";
        lunr.{{locale}}.trimmer = lunr.trimmerSupport.generateTrimmer(lunr.{{locale}}.wordCharacters);

        lunr.Pipeline.registerFunction(lunr.{{locale}}.trimmer, 'trimmer-{{locale}}');

        /* lunr stemmer function */
        lunr.{{locale}}.stemmer = (function() {
            /* create the wrapped stemmer object */
            var Among = lunr.stemmerSupport.Among,
                SnowballProgram = lunr.stemmerSupport.SnowballProgram,
                st = new {{stemmerFunction}};

            /* and return a function that stems a word for the current locale */
            return function(token) {
                return token.update(function (word) {
                    st.setCurrent(word);
                    st.stem();
                    return st.getCurrent();
                })
            }
        })();

        lunr.Pipeline.registerFunction(lunr.{{locale}}.stemmer, 'stemmer-{{locale}}');

        lunr.{{locale}}.stopWordFilter = lunr.generateStopWordFilter('{{stopWords}}'.split(' '));

        lunr.Pipeline.registerFunction(lunr.{{locale}}.stopWordFilter, 'stopWordFilter-{{locale}}');
    };
}))
